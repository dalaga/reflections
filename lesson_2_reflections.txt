What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository creates an empty git repository with a .git file.  The reason to create a repository so you can begin to use version control and have more editing and troubleshooting capabilities.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is where your files that you want to be involved with the commit are moved to. The working directory is your working area where you store your files for your repository. There may be commit file or non-commit files in the working directory.

How can you use the staging area to make sure you have one commit per logical change?

     I can use the staging area as a checkpoint for the commit making its way to the final commit. I can use git diff, git diff --staged commands to follow my changes from Working Directory into Staging. So it is a good thing to remember when making changes to your files and to make sure the changes make it to the end (repository)

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches can be useful if you want to experience on a new feature and what effect it may have on your code. The branching from the main Master line can preserve the original code from having all "experiment testing" commits. I think that branches help keep things orgainized and clean when you are writing code and when you are tracking bugs.

How do the diagrams help you visualize the branch structure?

	The diagrams definitely help visualize the paths of the each branch from the master branch. Plus it allows you to see which commit was done in which branch. A handy tool to have around to quickly see how the code is progressing via it's history / timeline.



